/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.muni.fi.pb138.Gui;

import cz.muni.fi.pb138.Devices.Device;
import cz.muni.fi.pb138.Devices.Port;
import cz.muni.fi.pb138.Gui.List.DeviceList;
import cz.muni.fi.pb138.Gui.List.PortList;
import cz.muni.fi.pb138.Gui.form.DeviceForm;
import cz.muni.fi.pb138.Gui.form.PortForm;
import cz.muni.fi.pb138.Main.ListOfDevices;
import cz.muni.fi.pb138.Managers.DeviceManager;
import cz.muni.fi.pb138.Managers.DeviceManagerImpl;
import cz.muni.fi.pb138.Managers.PortManager;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author Magdalena Kunikova
 */
public class Main extends javax.swing.JFrame {

    private DeviceManager deviceManager;
    private SwingWorker swingWorker;
    private List<Device> devices;
    private int rowIndex;
    public final int REMOVE = 0;
    public final int ADD = 1;
    public final int EDIT = 2;
    private Port port;

    /**
     * Creates new form MapOfNetworkUI
     */
    public Main() {
        ListOfDevices listOfDevices = new ListOfDevices();
        deviceManager = new DeviceManagerImpl();
        devices = listOfDevices.getListOfDevices();
        rowIndex = -1;
        initComponents();
    }

    private class editSwingWorker extends SwingWorker<Integer, Void> {

        Main frame;
        Integer deviceNumber;
        DeviceManager deviceManager;

        public editSwingWorker(Main frame, Integer deviceNumber, DeviceManager deviceManager) {
            this.frame = frame;
            this.deviceNumber = deviceNumber;
            this.deviceManager = deviceManager;
        }

        @Override
        protected Integer doInBackground() throws Exception {
            //Device device = deviceManager.findDeviceById( deviceNumber );
            //DeviceForm deviceForm = new DeviceForm( frame, device );
            //deviceForm.setVisible(true);
            return 0;
        }

        @Override
        protected void done() {
            swingWorker = null;
        }
    }

    private class deleteSwingWorker extends SwingWorker<Integer, Void> {

        DeviceManager deviceManager;

        public deleteSwingWorker(DeviceManager deviceManager) {
            this.deviceManager = deviceManager;
        }

        @Override
        protected Integer doInBackground() throws Exception {
        //    rowIndex = tableDevice.getSelectedRow();
            //    Main_TableModel deviceModel = (Main_TableModel) tableDevice.getModel();
            //    Integer deviceNumber = (Integer) deviceModel.getValueAt( rowIndex, 0 );
            //    Device device = deviceManager.findDeviceById( deviceNumber );
            //    deviceManager.removeDevice( device.getDid() );
            //    refreshDevices( device.get( rowIndex ), REMOVE );
            return 0;
        }

        @Override
        protected void done() {
            swingWorker = null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonAddDevice = new javax.swing.JButton();
        buttonDeleteDevice = new javax.swing.JButton();
        buttonAddPort = new javax.swing.JButton();
        buttonDeletePort = new javax.swing.JButton();
        buttonEditDevice = new javax.swing.JButton();
        labelDevice = new javax.swing.JLabel();
        labelPort = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonAddDevice.setText("Add device");
        buttonAddDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddDeviceActionPerformed(evt);
            }
        });

        buttonDeleteDevice.setText("Delete device");
        buttonDeleteDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteDeviceActionPerformed(evt);
            }
        });

        buttonAddPort.setText("Add port");
        buttonAddPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddPortActionPerformed(evt);
            }
        });

        buttonDeletePort.setText("Delete port");
        buttonDeletePort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeletePortActionPerformed(evt);
            }
        });

        buttonEditDevice.setText("Edit device");

        labelDevice.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelDevice.setText("Device");

        labelPort.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelPort.setText("Port");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(439, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelPort)
                    .addComponent(labelDevice)
                    .addComponent(buttonDeleteDevice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonAddPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonAddDevice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonDeletePort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonEditDevice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(labelDevice)
                .addGap(18, 18, 18)
                .addComponent(buttonAddDevice)
                .addGap(11, 11, 11)
                .addComponent(buttonEditDevice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonDeleteDevice)
                .addGap(29, 29, 29)
                .addComponent(labelPort)
                .addGap(18, 18, 18)
                .addComponent(buttonAddPort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonDeletePort)
                .addGap(79, 79, 79))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddDeviceActionPerformed
        DeviceForm deviceForm = new DeviceForm(deviceManager);
        deviceForm.setVisible(true);
    }//GEN-LAST:event_buttonAddDeviceActionPerformed

    private void buttonAddPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddPortActionPerformed
        PortForm portForm = new PortForm(devices, deviceManager);
        portForm.setVisible(true);
    }//GEN-LAST:event_buttonAddPortActionPerformed

    private void buttonDeleteDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteDeviceActionPerformed
        //rowIndex = tableInvoices.getSelectedRow();
        if (rowIndex == -1) {
            JOptionPane.showMessageDialog(rootPane, "No device was selected.");
        } else {
            int choice = JOptionPane.showConfirmDialog(rootPane, "Do you really want to delete the device?", null, JOptionPane.YES_NO_OPTION);
            if (choice == 0) {
                if (swingWorker != null) {
                    throw new IllegalStateException("Operation was not accomplished yet.");
                }
                //swingWorker = new deleteSwingWorker(deviceManager);
                swingWorker.execute();
            }
        }
    }//GEN-LAST:event_buttonDeleteDeviceActionPerformed

    private void buttonDeletePortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeletePortActionPerformed
        //rowIndex = tableInvoices.getSelectedRow();
        if (rowIndex == -1) {
            JOptionPane.showMessageDialog(rootPane, "No port was selected.");
        } else {
            int choice = JOptionPane.showConfirmDialog(rootPane, "Do you really want to delete the port?", null, JOptionPane.YES_NO_OPTION);
            if (choice == 0) {
                if (swingWorker != null) {
                    throw new IllegalStateException("Operation was not accomplished yet.");
                }
                //swingWorker = new deleteSwingWorker(deviceManager);
                swingWorker.execute();
            }
        }
    }//GEN-LAST:event_buttonDeletePortActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new Main().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddDevice;
    private javax.swing.JButton buttonAddPort;
    private javax.swing.JButton buttonDeleteDevice;
    private javax.swing.JButton buttonDeletePort;
    private javax.swing.JButton buttonEditDevice;
    private javax.swing.JLabel labelDevice;
    private javax.swing.JLabel labelPort;
    // End of variables declaration//GEN-END:variables
}
