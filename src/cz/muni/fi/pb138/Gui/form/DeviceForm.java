package cz.muni.fi.pb138.Gui.form;

import cz.muni.fi.pb138.Devices.Device;
import cz.muni.fi.pb138.Devices.DeviceType;
import cz.muni.fi.pb138.Gui.List.DeviceList;
import cz.muni.fi.pb138.Managers.DeviceManager;
import cz.muni.fi.pb138.Managers.DeviceManagerImpl;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author Magdalena Kunikova
 */
public class DeviceForm extends javax.swing.JFrame {

    SwingWorker swingWorker;
    public static final boolean EDIT = true;
    public static final boolean ADD = false;
    private boolean action;
    DeviceType deviceType;
    int spot;
    Device device;
    String name;
    DeviceManager deviceManager;

    /**
     * Creates new form DeviceForm
     */
    
    public String getName() {
        return name;
    }
        
    public DeviceType getDeviceType() {
        return deviceType;
    }
    
    public int getSpot() {
        return spot;
    }

    
    public DeviceForm(DeviceManager deviceManager) {
        this.deviceManager = deviceManager;
        initComponents();
    }

    public void setDeviceManager(DeviceManager deviceManager) {
        this.deviceManager = deviceManager;
    }

    public DeviceForm(Device device, DeviceManager deviceManager) {
        this.deviceManager = deviceManager;
        this.device = device;
        action = EDIT;
        initComponents();

        textFieldAddress.setText(device.getAddress());
        textFieldName.setText(device.getName());
        textFieldNumberOfPorts.setText(new Integer(device.getNumberOfPorts()).toString());
        //comboBoxDeviceType.se
        //typeOfDevice
    }

    private class addSwingWorker extends SwingWorker<Integer, Void> {
        
        Device device;
        DeviceManager deviceManager;

        public addSwingWorker(Device device, DeviceManager deviceManager) {
            this.device = device;
            this.deviceManager = deviceManager;
        }

        @Override
        protected Integer doInBackground() throws Exception {
            deviceManager.createDevice(device);

            return 0;
        }

        @Override
        protected void done() {
            buttonSave.setEnabled(true);
            swingWorker = null;
        }
    }

    private class editSwingWorker extends SwingWorker<Integer, Void> {
        
        Device newDevice;
        DeviceManager deviceManager;

        public editSwingWorker(Device newDevice, DeviceManager DevicecontactManager) {
            this.deviceManager = deviceManager;
            this.newDevice = newDevice;
        }

        @Override
        protected Integer doInBackground() throws Exception {
            deviceManager.updateDevice(newDevice);

            return 0;
        }

        @Override
        protected void done() {
            buttonSave.setEnabled(true);
            swingWorker = null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textFieldName = new javax.swing.JTextField();
        textFieldAddress = new javax.swing.JTextField();
        textFieldNumberOfPorts = new javax.swing.JTextField();
        panelName = new javax.swing.JLabel();
        panelDeviceType = new javax.swing.JLabel();
        panelAddress = new javax.swing.JLabel();
        panelNumberOfPorts = new javax.swing.JLabel();
        buttonSave = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        panelNewDevice = new javax.swing.JLabel();
        comboBoxDeviceType = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        textFieldSpot = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textFieldName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldNameActionPerformed(evt);
            }
        });

        textFieldAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldAddressActionPerformed(evt);
            }
        });

        panelName.setText("Name:");

        panelDeviceType.setText("Device type:");

        panelAddress.setText("MAC address:");

        panelNumberOfPorts.setText("Number of ports:");

        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        panelNewDevice.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        panelNewDevice.setText("New device");

        comboBoxDeviceType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Computer", "Hub", "Modem", "Router", "Switch12", "Switch24", "Switch48" }));
        comboBoxDeviceType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxDeviceTypeActionPerformed(evt);
            }
        });

        jLabel1.setText("Spot:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelName, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelDeviceType)
                            .addComponent(panelAddress)
                            .addComponent(panelNewDevice)
                            .addComponent(panelNumberOfPorts, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textFieldNumberOfPorts)
                            .addComponent(textFieldName, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(comboBoxDeviceType, 0, 120, Short.MAX_VALUE)
                            .addComponent(textFieldAddress)
                            .addComponent(textFieldSpot))))
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(panelNewDevice)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(panelDeviceType, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxDeviceType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelAddress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(panelNumberOfPorts)
                    .addComponent(textFieldNumberOfPorts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonCancel)
                            .addComponent(buttonSave))
                        .addGap(25, 25, 25))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textFieldSpot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldAddressActionPerformed

    private void textFieldNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldNameActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        if (swingWorker != null) {
            throw new IllegalStateException("Operation was not accomplished yet.");
        } else {
            if (action == ADD) {
                Device newDevice = parseTextFields();
                if (newDevice != null) {
                    swingWorker = new addSwingWorker(newDevice, deviceManager);
                    buttonSave.setEnabled(false);
                    swingWorker.execute();
                    this.dispose();
                }
            } else if (action == EDIT) {
                Device newDevice = parseTextFields();
                if (newDevice != null) {
                    //newDevice.setDid( device.getDid() );
                    swingWorker = new editSwingWorker(newDevice, deviceManager);
                    buttonSave.setEnabled(false);
                    swingWorker.execute();
                    this.dispose();
                }
            }  
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void comboBoxDeviceTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxDeviceTypeActionPerformed
        // TODO
    }//GEN-LAST:event_comboBoxDeviceTypeActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private Device parseTextFields() {
        name = textFieldName.getText();
        int deviceTypeIndex = comboBoxDeviceType.getSelectedIndex();
        String address = textFieldAddress.getText();
        String numberOfPortsString = textFieldNumberOfPorts.getText();
        String spotString = textFieldSpot.getText();
        
        deviceType = DeviceType.COMPUTER;
        switch( deviceTypeIndex ) {
            case 0:
                deviceType = DeviceType.COMPUTER;
                break;
            case 1:
                deviceType = DeviceType.HUB;
                break;
            case 2:
                deviceType = DeviceType.MODEM;
                break;
            case 3:
                deviceType = DeviceType.ROUTER;
                break;
            case 4:
                deviceType = DeviceType.SWITCH12;
                break;
            case 5:
                deviceType = DeviceType.SWITCH24;
                break;
            case 6:
                deviceType = DeviceType.SWITCH48;
                break;
        }
        
        int numberOfPorts = 0;
        try {
            numberOfPorts = Integer.parseInt(numberOfPortsString);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "Enter valid number.");
            return null;
        }
        
        spot = 0;
        try {
            spot = Integer.parseInt(spotString);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "Enter valid number.");
            return null;
        }
        
        if (name.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Enter name.");
            return null;
        }
        if (address.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Enter MAC address.");
            return null;
        }
        if (address.matches("^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$")) {
            JOptionPane.showMessageDialog(rootPane, "MAC address has wrong format.");
            return null;
        }
        if (numberOfPortsString.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Enter number of ports.");
            return null;
        }
        if (numberOfPorts <= 0) {
            JOptionPane.showMessageDialog(rootPane, "Number of ports must be greater than zero.");
            return null;
        }
        if (spotString.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Enter number of the spot.");
            return null;
        }
        if(spot < 1 || spot > 20) {
            JOptionPane.showMessageDialog(rootPane, "Enter number of the spot.");
            return null;
        }
        
        
        //Device newDevice = new Device( did, deviceType, address, numberOfPorts, arrayOfPorts, name );
        Device newDevice = new Device.Builder(10L, deviceType, address, numberOfPorts)
                .name(name)
                .build();

        return newDevice;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeviceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeviceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeviceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeviceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new DeviceForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonSave;
    private javax.swing.JComboBox<String> comboBoxDeviceType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel panelAddress;
    private javax.swing.JLabel panelDeviceType;
    private javax.swing.JLabel panelName;
    private javax.swing.JLabel panelNewDevice;
    private javax.swing.JLabel panelNumberOfPorts;
    private javax.swing.JTextField textFieldAddress;
    private javax.swing.JTextField textFieldName;
    private javax.swing.JTextField textFieldNumberOfPorts;
    private javax.swing.JTextField textFieldSpot;
    // End of variables declaration//GEN-END:variables
}
